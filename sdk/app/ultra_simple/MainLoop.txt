 /////////////////////////////////////////
    //UDP code initialization


    struct sockaddr_in address; 
    int sock = 0, valread; 
    struct sockaddr_in serv_addr; 
    
    printf("debug 1, line 141\n");
    //string msg_str;
    char buffer[1024] = {0}; 
    if ((sock = socket(AF_INET, SOCK_STREAM, 0)) < 0) { 
        printf("\n Socket creation error \n"); 
        return -1; 
    } 

    memset(&serv_addr, '0', sizeof(serv_addr)); 
   
    serv_addr.sin_family = AF_INET; 
    serv_addr.sin_port = htons(PORT); 
    
    printf("debug 1.2, line 154\n");

    // Convert IPv4 and IPv6 addresses from text to binary form 
    //137.146.126.135
    if(inet_pton(AF_INET, "137.146.126.135", &serv_addr.sin_addr)<=0) //IP address -> change to localhost 
    // if(inet_pton(AF_INET, "192.168.8.101", &serv_addr.sin_addr)<=0) //IP address -> change to localhost 
    { 
        printf("\nInvalid address/ Address not supported \n"); 
        return -1; 
    } 

    printf("debug 1.3, line 163\n");

   
    if (connect(sock, (struct sockaddr *)&serv_addr, sizeof(serv_addr)) < 0) 
    { 
        printf("debug 1.4, line 163\n");

        printf("\nConnection Failed \n"); 
        return -1; 
    } 
    printf("debug 2, line 167\n");


// fetech result and print it out...
    //one revolution
    while (1) {
        rplidar_response_measurement_node_t nodes[8192];
        size_t   count = _countof(nodes);

        op_result = drv->grabScanData(nodes, count);

        if (IS_OK(op_result)) {
            drv->ascendScanData(nodes, count);
            printf("\n\nstarting scan\n\n=====\n");

            std::string msg_str = "";


            //Jerry's code

            /*  first, check flag, 
                if false, 
                    then scan the scene and store the data in an 2D array
                        array: approx 570 depth
                    repeat three times and get an average, turn flag into false
                second, check flag, 
                if true, 
                    keep while() loop on scanning the scene
                        check every angle, 
                            compare reference array with current angle
                            if distance changed
                                record angle
            check angle:
                method 1: check array list index. cons: small deviation - within half a degree
                method 2: average each angle. 0-180, find index, if distance not zero -> add and average

                final -> method 1
            */
            if(!checked){
                printf("print reference array\n");

                //loop and calculate average
                for(int i=0; i<10; i++){
                    // float refArray[700][2]; //2D array, 570 elements, then 0-> angle, 1->distance
                    // build up reference array 
                    for (int pos = 0; pos < (int)count ; ++pos) {
                        refArray[pos][0] += (nodes[pos].angle_q6_checkbit >> RPLIDAR_RESP_MEASUREMENT_ANGLE_SHIFT)/64.0f; // my angle
                        refArray[pos][1] +=  nodes[pos].distance_q2/4.0f; // my distance 
                    }
                    //print the array in the first loop
                    if(i==0){
                        //average each node and print reference array
                        for(int i=0; i<600; i++)    //This loops on the rows.
                        {
                            for(int j=0; j<2; j++) //This loops on the columns
                            {
                                printf("%f  ", refArray[i][j] );
                            }
                            printf("\n");
                        }
                    }
                }

                //average each node and print reference array
                for(int i=0; i<600; i++)    //This loops on the rows.
                {
                    for(int j=0; j<2; j++) //This loops on the columns
                    {
                        refArray[i][j] = refArray[i][j]/10;
                        printf("%f  ", refArray[i][j] );
                    }
                    printf("\n");
                }

                
                checked = true;
            }
             //660 
            for (int pos = 0; pos < (int)count ; ++pos) {

                myAngle = (nodes[pos].angle_q6_checkbit >> RPLIDAR_RESP_MEASUREMENT_ANGLE_SHIFT)/64.0f;
                myDistance = nodes[pos].distance_q2/4.0f;

                expDistance = refArray[pos][1];

                //compare the distance
                if( (myAngle >= 0.0 && myAngle <= 85.0) || (myAngle >= 275 && myAngle <= 360)){
                              
                    if( abs(expDistance - myDistance) > 500.0){ //mm threshold, abs stands for absolute threshold
                       // printf("object detected at angle %03.2f and distance %f\n", myAngle, myDistance);
                       // printf("expected distance at angle %03.2f is %f mm\n", myAngle, expDistance);
                       // printf("actual distance at angle %03.2f is %f mm\n", myAngle, myDistance);
                       // printf("Front Distance %03.2f, left distance, %03.2f, right distance %03.2f \n", frontDistance, leftDistance, rightDistance);
                       // printf("--------------------------------\n"); 


            /*
                check angle ranges, merge closer ones

                build up an array rawData
                loop through the array and detect gap: 
                    if prev is 3 degree smaller than cur, then there is a gap, then 
                    update variable 3; variable 3 is group number

                    if x is larger than 6, 
                    then divide the gap again with a larger degree gap
                
                build up a new array -> finalData[x][3]
                for each group:
                    [0] average the distance
                    [1] average the angle
                    [2] get group size (lastAngle - firstAngle)
                
                from angle calculate x,y distance -> x = abs(distance*cosA); y = abs(distance*sinA)

            */


                        msg_str += to_string(myAngle);
                        msg_str += ",";
                        msg_str += to_string(myDistance);
                        msg_str += "\n";
                    }

                }
            }


            char msg[msg_str.length() + 1];
            strcpy(msg, msg_str.c_str());
            //array
            send(sock , msg , strlen(msg) , 0 ); 



        }

        if (ctrl_c_pressed){ 
            break;
        }
    }



///////////////////////////////////////////////////////////////////////////////////////////
"""Small example OSC client

This program sends 10 random values between 0.0 and 1.0 to the /filter address,
waiting for 1 seconds between each value.
"""

import argparse
import random
import time

from pythonosc import osc_message_builder
from pythonosc import udp_client

import socket

client = udp_client.SimpleUDPClient("137.146.123.51", 8080)
# client2 = udp_client.SimpleUDPClient("192.168.8.106", 9999)

s = socket.socket()
host = socket.gethostname()
port = 7777
s.bind(('137.146.126.135',port))
s.listen(5)
while True:
    # print("sending osc loop 1")
    c, addr = s.accept()
    print("Connection accepted from " + repr(addr[1]))
    
    while True:
        # print("sending osc loop 2")
        data = c.recv(1026).decode("utf-8")

        if(data):
            print("Data sent: " + data)
            newData = data.split(",")
            client.send_message("/x", newData[0])
            client.send_message("/y", newData[1])

            # up to six people
            # 2D array people[6][2]

            print(len(newData))

            # for i in range(len(newData)/2):
            #     client.send_message("/x", newData[i])
            #     client.send_message("/y", newData[i+1])
            

            # client.send_message("/open", newData[2])
            # client2.send_message("/Austin", newData[3])
            print("Data sent: " + data)
        #print(repr(addr[1]) + ": " + data)
